##
# fichier de properties utilise par spring 
# pour configurer le commons.pool
##

#(true || false) est ce que le dernier objet entre doit etre le premier objet sortie
fr.cimut.habilitation.jdbc.pool.lifo=false

# nombre d objets actifs maximum
fr.cimut.habilitation.jdbc.pool.maxActive=5

# nombre d objets dormants maximum
fr.cimut.habilitation.jdbc.pool.maxIdle=5

# nombre total dobjet (dormant et actif) -1 = pas de limite
fr.cimut.habilitation.jdbc.pool.maxTotal=5

# delai d attente que le pool s accorde avant de peter une exception si whenExhaustedAction=WHEN_EXHAUSTED_BLOCK
fr.cimut.habilitation.jdbc.pool.maxWait=20000

# periode a partir de laquelle un objet dormant est elligible pour leviction.
fr.cimut.habilitation.jdbc.pool.minEvictableIdleTimeMillis=-1

# nombre d objets dormants minimum
fr.cimut.habilitation.jdbc.pool.minIdle=2

# permet de definir le nombre d objet dormant qui seront tester (par default 3)
fr.cimut.habilitation.jdbc.pool.numTestsPerEvictionRun=1

#(true || false) permet de definir si les objets doivent etre teste avant la sortie du pool
fr.cimut.habilitation.jdbc.pool.testOnBorrow=false

#(true || false) permet de definir si les objets doivent etre teste a l entree du pool (le retour)
fr.cimut.habilitation.jdbc.pool.testOnReturn=false

### gestion du thread de surveillance de validite des objets ###
#(true || false) permet de definir si les objets dormants dans le pool doivent etre testes
fr.cimut.habilitation.jdbc.pool.testWhileIdle=false

# periode entre 2 tests sur les objets dormants (Il faut absolument qu il soit superieur a 0 sinon, pas de test)
fr.cimut.habilitation.jdbc.pool.timeBetweenEvictionRunsMillis=-1

# action a realiser lorque le pool est vide. valeurs possible.
# ----> 0 : WHEN_EXHAUSTED_FAIL  : le pool nous petera entre les mains.
# ----> 1 : WHEN_EXHAUSTED_BLOCK : le pool bloquera le processus en attente d une connection disponible.
# ----> 2 : WHEN_EXHAUSTED_GROW  : le pool nous initialisera une connection temporaire. 
fr.cimut.habilitation.jdbc.pool.whenExhaustedAction=1

# liste des objets a pooler.
# regle de nommage :
# clef/valeur ou valeur est egal a la classe package + nom de l objet a pooler. 
# vous utiliserez la clef 'fr.cimut.habilitation.jdbc.pool.xx' pour recuperer votre objet aupres du pool.

# dao foure tout :-) comme par exemple les donnees selligent, rsi, service, etc... 
fr.cimut.habilitation.jdbc.pool.objectPoolDefault=fr.cimut.habilitation.server.dao.jdbc.ObjectPoolDefault
# dao chargee de gerer les favoris creation/suppression/lecture des favoris application + lien html 
fr.cimut.habilitation.jdbc.pool.objectPoolFavori=fr.cimut.habilitation.server.dao.jdbc.ObjectPoolFavori
# dao chargee de gerer les appels liees aux applications cimut & tranverses
fr.cimut.habilitation.jdbc.pool.objectPoolApplication=fr.cimut.habilitation.server.dao.jdbc.ObjectPoolApplication
# dao chargee de gerer les appels liees aux donnees de la personne, compte, organisme, profil de l utilisateur, etc...
fr.cimut.habilitation.jdbc.pool.objectPoolPersonne=fr.cimut.habilitation.server.dao.jdbc.ObjectPoolPersonne
# dao chargee de gerer les appels liees aux donnees des repertoires organisationnels.
fr.cimut.habilitation.jdbc.pool.objectPoolRepertoire=fr.cimut.habilitation.server.dao.jdbc.ObjectPoolRepertoire
# dao chargee de gerer les appels liees aux donnees des preferences utilisateurs.
fr.cimut.habilitation.jdbc.pool.objectPoolPreference=fr.cimut.habilitation.server.dao.jdbc.ObjectPoolPreference




